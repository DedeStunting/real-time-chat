{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { connection, server as WebSocketServer } from 'websocket';\r\nimport http from 'http';\r\nimport { IncomingMessage, SupportedMessage } from './messages/incomingMessages';\r\nimport { InMemoryStore } from './store/InMemoryStore';\r\nimport { UserManager } from './UserManager';\r\nimport { OutgoingMessage, SupportedMessage as OutgoingSupportedMessages } from './messages/outgoingMessages';\r\n\r\nconst server = http.createServer(function (request: any, response: any) {\r\n    console.log((new Date()) + ' Received request for ' + request.url);\r\n    response.writeHead(404);\r\n    response.end();\r\n});\r\n\r\nconst userManager = new UserManager();\r\nconst store = new InMemoryStore();\r\n\r\nserver.listen(8080, function () {\r\n    console.log((new Date()) + ' Server is listening on port 8080');\r\n});\r\n\r\nconst wsServer = new WebSocketServer({\r\n    httpServer: server,\r\n    autoAcceptConnections: false\r\n});\r\n\r\nfunction originIsAllowed(origin: string) {\r\n    return true; // Always accept connections\r\n}\r\n\r\nwsServer.on('request', function (request) {\r\n    if (!originIsAllowed(request.origin)) {\r\n        request.reject();\r\n        console.log((new Date()) + ' Connection from origin ' + request.origin + ' rejected.');\r\n        return;\r\n    }\r\n\r\n    const connection = request.accept('echo-protocol', request.origin);\r\n    console.log((new Date()) + ' Connection accepted.');\r\n    connection.on('message', function (message) {\r\n        if (message.type === 'utf8') {\r\n            try {\r\n                messageHandler(connection, JSON.parse(message.utf8Data));\r\n            } catch (error) {\r\n                console.error(\"Error handling message:\", error);\r\n            }\r\n        }\r\n    });\r\n    connection.on('close', function (reasonCode, description) {\r\n        console.log((new Date()) + ' Peer ' + connection.remoteAddress + ' disconnected.');\r\n    });\r\n});\r\n\r\nfunction messageHandler(ws: connection, message: IncomingMessage) {\r\n    if (message.type == SupportedMessage.JoinRoom) {\r\n        const payload = message.payload;\r\n        userManager.addUser(payload.name, payload.userId, payload.roomId, ws);\r\n    }\r\n    if (message.type === SupportedMessage.SendMessage) {\r\n        const payload = message.payload;\r\n        const user = userManager.getUser(payload.roomId, payload.userId);\r\n        if (!user) {\r\n            console.error(\"User not found in the db\");\r\n            return;\r\n        }\r\n        let chat = store.addChat(payload.userId, user.name, payload.roomId, payload.message);\r\n        if (!chat) {\r\n            return;\r\n        }\r\n\r\n        const outgoingPayload: OutgoingMessage = {\r\n            type: OutgoingSupportedMessages.AddChat,\r\n            payload: {\r\n                chatId: chat.id,\r\n                roomId: payload.roomId,\r\n                message: payload.message,\r\n                name: user.name,\r\n                upvotes: 0\r\n            }\r\n        }\r\n\r\n        userManager.broadcast(payload.roomId, payload.userId, outgoingPayload);\r\n    }\r\n    if (message.type === SupportedMessage.UpvoteMessage) {\r\n        const payload = message.payload;\r\n        const chat = store.upvote(payload.userId, payload.roomId, payload.chatId);\r\n        if (!chat) {\r\n            return;\r\n        }\r\n\r\n        const outgoingPayload: OutgoingMessage = {\r\n            type: OutgoingSupportedMessages.UpdateChat,\r\n            payload: {\r\n                chatId: payload.chatId,\r\n                roomId: payload.roomId,\r\n                upvotes: chat.upvotes.length\r\n            }\r\n        }\r\n\r\n        userManager.broadcast(payload.roomId, payload.userId, outgoingPayload);\r\n    }\r\n}\r\n"]}